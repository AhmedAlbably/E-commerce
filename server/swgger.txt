src/models/Model.js:
src/routes/Route.js:
src/controllers/Controller.js:
src/utils/validator/Validator.js:
src/controllers/handlersFactory.js:
src/utils/apiFeatures.js:



src/controllers/handlersFactory.js:
const asyncHandler = require("express-async-handler");
const ApiError = require("../utils/apiError");
const ApiFeatures = require("../utils/apiFeatures");

exports.deleteOne = (Model) =>
  asyncHandler(async (req, res, next) => {
    const { id } = req.params;
    const document = await Model.findByIdAndDelete(id);
    if (!document) {
      return next(new ApiError(`No document for this id ${id}`, 404));
    }
    res.status(204).send();
  });

exports.updateOne = (Model, populationOpt) =>
  asyncHandler(async (req, res, next) => {
    let query = Model.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true } // If true , returns the updated document And if false returns the original document
    );

    if (populationOpt) {
      query = query.populate({ path: populationOpt, select: "-__v" });
    }

    const document = await query;
    if (!document) {
      return next(
        new ApiError(`No document for this id ${req.params.id}`, 404)
      );
    }
    res.status(200).json({ data: document });
  });

exports.createOne = (Model, modelName) =>
  asyncHandler(async (req, res) => {
    console.log("Before:",req.body)
    let body =
      modelName === "users" ? { ...req.body, role: "employee" } : req.body;
      console.log("After:",body)
    const newDoc = await Model.create(body);
    res.status(201).json({ data: newDoc });
  });

exports.getOne = (Model, populationOpt, modelName) =>
  asyncHandler(async (req, res, next) => {
    const { id } = req.params;
    let user =
      modelName === "order" && req.user.role === "user" ? req.user.id : null;
    let role = modelName === "users" ? "employee" : null;
    // 1) Build query
    // let query = Model.findById(id);
    let query = Model.findOne({
      _id: id,
      ...(user && { user }),
      ...(role && { role }),
    });
    if (populationOpt) {
      query = query.populate({ path: populationOpt, select: "-__v" });
    }

    // 2) Execute query
    const document = await query;

    if (!document) {
      return next(new ApiError(`No document for this id ${id}`, 404));
    }
    res.status(200).json({ data: document });
  });

exports.getAll = (Model, searchKeyWord, populationOpt) =>
  asyncHandler(async (req, res) => {
    const needsFilter = [
      "SubCategories",
      "Reviews",
      "Orders",
      "Users",
    ].includes(searchKeyWord);
    const filterObj = needsFilter ? req.filterObj : {};

    let apiFeatures = new ApiFeatures(Model.find(filterObj), req.query)
      .filter()
      .search(searchKeyWord)
      .limitFields()
      .sort();

    const filteredCount = await apiFeatures.mongooseQuery
      .clone()
      .countDocuments();
    apiFeatures.Paginate(filteredCount);
    if (populationOpt) {
      apiFeatures.mongooseQuery = apiFeatures.mongooseQuery.populate({
        path: populationOpt,
        select: "-__v",
      });
    }

    // 6) Execute query
    const { mongooseQuery, paginationResults } = apiFeatures;
    const documents = await mongooseQuery;
    res
      .status(200)
      .json({ results: documents.length, paginationResults, data: documents });
  });

src/utils/apiFeatures.js:
class ApiFeatures {
  constructor(mongooseQuery, queryString) {
    this.queryString = queryString;
    this.mongooseQuery = mongooseQuery;
  }

  filter() {
    // 1) Filtering
    const queryStringObj = { ...this.queryString };
    const excludesFields = ["page", "sort", "limit", "fields", "keyword"];
    excludesFields.forEach((field) => delete queryStringObj[field]);

    // Apply Filtration using [gte, gt, lte, lt]
    let queryStr = JSON.stringify(queryStringObj);
    queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`);
    this.mongooseQuery = this.mongooseQuery.find(JSON.parse(queryStr));
    return this;
  }

  sort() {
    // 3) Sorting
    if (this.queryString.sort) {
      const sortBy = this.queryString.sort.split(",").join(" ");
      this.mongooseQuery = this.mongooseQuery.sort(sortBy);
    } else {
      this.mongooseQuery = this.mongooseQuery.sort("-createdAt");
    }

    return this;
  }

  limitFields() {
    if (this.queryString.fields) {
      const fields = this.queryString.fields.split(",").join(" ");
      this.mongooseQuery = this.mongooseQuery.select(`${fields}`);
    } else {
      this.mongooseQuery = this.mongooseQuery.select(`-__v`);
    }
    return this;
  }

  search(modelName) {
    // 5) Search
    const escapeRegExp = (string) => string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    if (this.queryString.keyword) {
      const safeKeyword = escapeRegExp(this.queryString.keyword);
      let query = {};
      if (modelName === "Products") {
        query.$or = [
          { title: { $regex: safeKeyword, $options: "i" } },
          { description: { $regex: safeKeyword, $options: "i" } },
        ];
      } else {
        query = { name: { $regex: safeKeyword, $options: "i" } };
      }
      this.mongooseQuery = this.mongooseQuery.find(query);
    }
    return this;
  }

  Paginate(countDocuments) {
    const page = +this.queryString.page || 1;
    const limit = +this.queryString.limit || 5;
    const skip = (page - 1) * limit;
    const endIndex = page * limit;

    // Pagination result
    const pagination = {};
    pagination.currentPage = page;
    pagination.limit = limit;
    pagination.numberOfPages = Math.ceil(countDocuments / limit);

    // next page
    if (endIndex < countDocuments) {
      pagination.next = page + 1;
    }

    if (skip > 0) {
      pagination.prev = page - 1;
    }

    this.mongooseQuery = this.mongooseQuery.skip(skip).limit(limit);
    this.paginationResults = pagination;
    return this;
  }
}

module.exports = ApiFeatures;
